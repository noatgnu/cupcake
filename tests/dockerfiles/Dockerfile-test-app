# Dockerfile for CUPCAKE test application
# Based on the main Dockerfile but optimized for testing

FROM python:3.10-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Set work directory
WORKDIR /app

# Install system dependencies required for testing
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    postgresql-client \
    redis-tools \
    curl \
    wget \
    git \
    # Testing tools
    sqlite3 \
    # Media processing (minimal for testing)
    ffmpeg \
    # OCR dependencies (lightweight for testing)
    tesseract-ocr \
    tesseract-ocr-eng \
    # Image processing
    libjpeg-dev \
    libpng-dev \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Install additional testing dependencies
RUN pip install --no-cache-dir \
    pytest \
    pytest-django \
    pytest-cov \
    pytest-xdist \
    pytest-mock \
    factory-boy \
    faker \
    selenium \
    requests \
    locust

# Copy the application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/test_media /app/test_static /app/test_fixtures /app/test_coverage

# Create a management command to wait for database
RUN mkdir -p /app/cc/management/commands
COPY tests/management_commands/wait_for_db.py /app/cc/management/commands/

# Make the script executable
RUN chmod +x /app/manage.py

# Expose port for testing
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8000/health/ || exit 1