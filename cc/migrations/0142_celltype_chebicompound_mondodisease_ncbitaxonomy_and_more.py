# Generated by Django 5.2.3 on 2025-07-11 05:48

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cc', '0141_importtracker_importedrelationship_importedfile_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CellType',
            fields=[
                ('identifier', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('cell_line', models.BooleanField(default=False)),
                ('organism', models.CharField(blank=True, max_length=255, null=True)),
                ('tissue_origin', models.CharField(blank=True, max_length=255, null=True)),
                ('disease_context', models.CharField(blank=True, max_length=255, null=True)),
                ('accession', models.CharField(blank=True, max_length=255, null=True)),
                ('synonyms', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Cell Type',
                'verbose_name_plural': 'Cell Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ChEBICompound',
            fields=[
                ('identifier', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField(blank=True, null=True)),
                ('synonyms', models.TextField(blank=True, null=True)),
                ('formula', models.CharField(blank=True, max_length=255, null=True)),
                ('mass', models.FloatField(blank=True, null=True)),
                ('charge', models.IntegerField(blank=True, null=True)),
                ('inchi', models.TextField(blank=True, null=True)),
                ('smiles', models.TextField(blank=True, null=True)),
                ('parent_terms', models.TextField(blank=True, null=True)),
                ('roles', models.TextField(blank=True, null=True)),
                ('obsolete', models.BooleanField(default=False)),
                ('replacement_term', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'ChEBI Compound',
                'verbose_name_plural': 'ChEBI Compounds',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MondoDisease',
            fields=[
                ('identifier', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField(blank=True, null=True)),
                ('synonyms', models.TextField(blank=True, null=True)),
                ('xrefs', models.TextField(blank=True, null=True)),
                ('parent_terms', models.TextField(blank=True, null=True)),
                ('obsolete', models.BooleanField(default=False)),
                ('replacement_term', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'MONDO Disease',
                'verbose_name_plural': 'MONDO Diseases',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NCBITaxonomy',
            fields=[
                ('tax_id', models.IntegerField(primary_key=True, serialize=False)),
                ('scientific_name', models.CharField(max_length=255)),
                ('common_name', models.CharField(blank=True, max_length=255, null=True)),
                ('synonyms', models.TextField(blank=True, null=True)),
                ('rank', models.CharField(blank=True, max_length=100, null=True)),
                ('parent_tax_id', models.IntegerField(blank=True, null=True)),
                ('lineage', models.TextField(blank=True, null=True)),
                ('genetic_code', models.IntegerField(blank=True, null=True)),
                ('mitochondrial_genetic_code', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'NCBI Taxonomy',
                'verbose_name_plural': 'NCBI Taxonomy',
                'ordering': ['scientific_name'],
            },
        ),
        migrations.CreateModel(
            name='PSIMSOntology',
            fields=[
                ('identifier', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField(blank=True, null=True)),
                ('synonyms', models.TextField(blank=True, null=True)),
                ('parent_terms', models.TextField(blank=True, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('obsolete', models.BooleanField(default=False)),
                ('replacement_term', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PSI-MS Ontology',
                'verbose_name_plural': 'PSI-MS Ontology Terms',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UberonAnatomy',
            fields=[
                ('identifier', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField(blank=True, null=True)),
                ('synonyms', models.TextField(blank=True, null=True)),
                ('xrefs', models.TextField(blank=True, null=True)),
                ('parent_terms', models.TextField(blank=True, null=True)),
                ('part_of', models.TextField(blank=True, null=True)),
                ('develops_from', models.TextField(blank=True, null=True)),
                ('obsolete', models.BooleanField(default=False)),
                ('replacement_term', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'UBERON Anatomy',
                'verbose_name_plural': 'UBERON Anatomy Terms',
                'ordering': ['name'],
            },
        ),
        migrations.RenameField(
            model_name='historicallabgroup',
            old_name='is_professional',
            new_name='can_perform_ms_analysis',
        ),
        migrations.RenameField(
            model_name='labgroup',
            old_name='is_professional',
            new_name='can_perform_ms_analysis',
        ),
        migrations.AddField(
            model_name='historicalinstrumentjob',
            name='instrument_end_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalinstrumentjob',
            name='instrument_start_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalinstrumentjob',
            name='personnel_end_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalinstrumentjob',
            name='personnel_start_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='historicallabgroup',
            name='is_core_facility',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='instrumentjob',
            name='instrument_end_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='instrumentjob',
            name='instrument_start_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='instrumentjob',
            name='personnel_end_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='instrumentjob',
            name='personnel_start_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='labgroup',
            name='is_core_facility',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='ServiceTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lab_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_tiers', to='cc.labgroup')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'lab_group')},
            },
        ),
        migrations.CreateModel(
            name='BillingRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('instrument_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('instrument_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('personnel_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('personnel_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('personnel_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('other_quantity', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('other_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('other_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('other_description', models.CharField(blank=True, max_length=100)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('billed', 'Billed'), ('paid', 'Paid'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('billing_date', models.DateField(auto_now_add=True)),
                ('paid_date', models.DateField(blank=True, null=True)),
                ('invoice_number', models.CharField(blank=True, max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instrument_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cc.instrumentjob')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('service_tier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cc.servicetier')),
            ],
            options={
                'ordering': ['-billing_date'],
            },
        ),
        migrations.CreateModel(
            name='ServicePrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('billing_unit', models.CharField(choices=[('per_sample', 'Per Sample'), ('per_hour_instrument', 'Per Hour - Instrument Time'), ('per_hour_personnel', 'Per Hour - Personnel Time'), ('per_injection', 'Per Injection'), ('flat_rate', 'Flat Rate')], max_length=25)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('effective_date', models.DateField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cc.instrument')),
                ('service_tier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='cc.servicetier')),
            ],
            options={
                'ordering': ['service_tier', 'instrument', 'billing_unit'],
                'unique_together': {('service_tier', 'instrument', 'billing_unit')},
            },
        ),
    ]
