# Generated by Django 5.2.3 on 2025-06-28 17:01

import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cc', '0135_historicalinstrument_accepts_bookings_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BackupLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backup_type', models.CharField(choices=[('database', 'Database Backup'), ('media', 'Media Backup'), ('full', 'Full Backup')], max_length=20)),
                ('status', models.CharField(choices=[('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='running', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, help_text='Backup duration in seconds', null=True)),
                ('backup_file_path', models.TextField(blank=True, help_text='Path to backup file', null=True)),
                ('file_size_bytes', models.BigIntegerField(blank=True, help_text='Backup file size in bytes', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error details if backup failed', null=True)),
                ('success_message', models.TextField(blank=True, help_text='Success details', null=True)),
                ('triggered_by', models.CharField(default='cron', help_text='What triggered the backup (cron, manual, etc.)', max_length=100)),
                ('container_id', models.CharField(blank=True, help_text='Docker container ID that ran the backup', max_length=64, null=True)),
            ],
            options={
                'ordering': ['-started_at'],
                'indexes': [models.Index(fields=['backup_type', 'status'], name='cc_backuplo_backup__14864e_idx'), models.Index(fields=['started_at'], name='cc_backuplo_started_d199e8_idx')],
            },
        ),
        migrations.CreateModel(
            name='HistoricalBackupLog',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('backup_type', models.CharField(choices=[('database', 'Database Backup'), ('media', 'Media Backup'), ('full', 'Full Backup')], max_length=20)),
                ('status', models.CharField(choices=[('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='running', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, editable=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, help_text='Backup duration in seconds', null=True)),
                ('backup_file_path', models.TextField(blank=True, help_text='Path to backup file', null=True)),
                ('file_size_bytes', models.BigIntegerField(blank=True, help_text='Backup file size in bytes', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error details if backup failed', null=True)),
                ('success_message', models.TextField(blank=True, help_text='Success details', null=True)),
                ('triggered_by', models.CharField(default='cron', help_text='What triggered the backup (cron, manual, etc.)', max_length=100)),
                ('container_id', models.CharField(blank=True, help_text='Docker container ID that ran the backup', max_length=64, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical backup log',
                'verbose_name_plural': 'historical backup logs',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDocumentPermission',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('can_view', models.BooleanField(default=True)),
                ('can_download', models.BooleanField(default=True)),
                ('can_comment', models.BooleanField(default=False)),
                ('can_edit', models.BooleanField(default=False)),
                ('can_share', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=False)),
                ('shared_at', models.DateTimeField(blank=True, editable=False)),
                ('expires_at', models.DateTimeField(blank=True, help_text='Optional expiration date for access', null=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('access_count', models.PositiveIntegerField(default=0)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('annotation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cc.annotation')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('lab_group', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cc.labgroup')),
                ('shared_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical document permission',
                'verbose_name_plural': 'historical document permissions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='DocumentPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_view', models.BooleanField(default=True)),
                ('can_download', models.BooleanField(default=True)),
                ('can_comment', models.BooleanField(default=False)),
                ('can_edit', models.BooleanField(default=False)),
                ('can_share', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=False)),
                ('shared_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='Optional expiration date for access', null=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('access_count', models.PositiveIntegerField(default=0)),
                ('annotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_permissions', to='cc.annotation')),
                ('lab_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cc.labgroup')),
                ('shared_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_documents', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['annotation', 'user'], name='cc_document_annotat_718883_idx'), models.Index(fields=['annotation', 'lab_group'], name='cc_document_annotat_ee51d1_idx')],
                'unique_together': {('annotation', 'lab_group'), ('annotation', 'user')},
            },
        ),
    ]
