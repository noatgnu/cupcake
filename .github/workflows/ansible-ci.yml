name: CUPCAKE Ansible CI

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      os_matrix:
        description: 'OS versions to test (comma-separated)'
        required: false
        default: 'ubuntu:22.04,debian:12'
        type: string
      skip_deployment:
        description: 'Skip deployment tests (syntax check only)'
        required: false
        default: false
        type: boolean

env:
  ANSIBLE_HOST_KEY_CHECKING: False
  ANSIBLE_STDOUT_CALLBACK: yaml
  ANSIBLE_FORCE_COLOR: true

jobs:
  prepare-matrix:
    name: Prepare Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set up test matrix
        id: set-matrix
        run: |
          if [[ -n "${{ github.event.inputs.os_matrix }}" ]]; then
            IFS=',' read -ra OS_ARRAY <<< "${{ github.event.inputs.os_matrix }}"
            MATRIX_JSON=$(printf '%s\n' "${OS_ARRAY[@]}" | jq -R . | jq -s .)
          else
            MATRIX_JSON='["ubuntu:20.04", "ubuntu:22.04", "debian:11", "debian:12"]'
          fi
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Generated matrix: $MATRIX_JSON"

  ansible-test:
    name: Test ${{ matrix.os }}
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Ansible and tools
        run: |
          pip install --upgrade pip
          pip install ansible ansible-lint yamllint molecule docker

      - name: Lint configuration files
        run: |
          echo "::group::YAML Lint"
          yamllint ansible-playbooks/ || true
          echo "::endgroup::"
          
          echo "::group::Ansible Lint"
          ansible-lint ansible-playbooks/cupcake-standalone.yml || true
          echo "::endgroup::"

      - name: Syntax check
        run: |
          cd ansible-playbooks
          ansible-playbook --syntax-check cupcake-standalone.yml

      - name: Skip deployment test
        if: github.event.inputs.skip_deployment == 'true'
        run: |
          echo "::notice::Deployment test skipped as requested"
          exit 0

      - name: Set up Docker container
        run: |
          docker run -d \
            --name cupcake-ci-test \
            --privileged \
            --cgroupns host \
            --tmpfs /tmp \
            --tmpfs /run \
            --tmpfs /run/lock \
            --volume /sys/fs/cgroup:/sys/fs/cgroup:rw \
            --volume $PWD:/workspace \
            --workdir /workspace \
            --health-cmd="systemctl is-system-running --wait || true" \
            --health-interval=30s \
            --health-timeout=30s \
            --health-retries=3 \
            ${{ matrix.os }} \
            /lib/systemd/systemd

          sleep 10
          
          docker exec cupcake-ci-test bash -c "
            apt-get update >/dev/null 2>&1 && 
            DEBIAN_FRONTEND=noninteractive apt-get install -y \
              openssh-server sudo python3 systemd-sysv dbus \
              ca-certificates curl iproute2 \
              >/dev/null 2>&1 &&
            useradd -m -s /bin/bash -G sudo ansible &&
            echo 'ansible:ansible' | chpasswd &&
            echo 'ansible ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/ansible &&
            mkdir -p /home/ansible/.ssh &&
            chmod 700 /home/ansible/.ssh &&
            systemctl enable ssh &&
            systemctl start ssh
          "

      - name: Configure SSH access
        run: |
          ssh-keygen -t rsa -b 2048 -f ~/.ssh/ci_test -N ""
          
          docker exec cupcake-ci-test bash -c "
            echo '$(cat ~/.ssh/ci_test.pub)' >> /home/ansible/.ssh/authorized_keys &&
            chmod 600 /home/ansible/.ssh/authorized_keys &&
            chown -R ansible:ansible /home/ansible/.ssh
          "
          
          CONTAINER_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' cupcake-ci-test)
          echo "CONTAINER_IP=$CONTAINER_IP" >> $GITHUB_ENV

      - name: Create CI inventory
        run: |
          cat > ansible-playbooks/ci-inventory.yml << EOF
          all:
            hosts:
              ci-target:
                ansible_host: $CONTAINER_IP
                ansible_user: ansible
                ansible_ssh_private_key_file: ~/.ssh/ci_test
                ansible_python_interpreter: /usr/bin/python3
                ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
                
                cupcake_db_password: "ci_test_password_$(date +%s)"
                cupcake_secret_key: "ci_django_secret_$(openssl rand -hex 32)"
                cupcake_admin_password: "ci_admin_$(date +%s)"
                cupcake_version: "latest"
                django_debug: false
          EOF

      - name: Test Ansible connectivity
        run: |
          cd ansible-playbooks
          
          timeout 60 bash -c 'until ansible all -i ci-inventory.yml -m ping >/dev/null 2>&1; do sleep 2; done'
          
          ansible all -i ci-inventory.yml -m ping
          ansible all -i ci-inventory.yml -m setup | head -20

      - name: Run deployment (check mode)
        run: |
          cd ansible-playbooks
          echo "::group::Deployment Dry Run"
          ansible-playbook -i ci-inventory.yml cupcake-standalone.yml --check --diff -v
          echo "::endgroup::"

      - name: Run actual deployment
        timeout-minutes: 30
        run: |
          cd ansible-playbooks
          echo "::group::Real Deployment"
          ansible-playbook -i ci-inventory.yml cupcake-standalone.yml -v
          echo "::endgroup::"

      - name: Validate deployment
        run: |
          echo "::group::Validation Script"
          docker exec cupcake-ci-test bash -c "
            cd /workspace && 
            chmod +x ansible-playbooks/validate-deployment.sh &&
            ./ansible-playbooks/validate-deployment.sh
          "
          echo "::endgroup::"

      - name: Service health check
        run: |
          echo "::group::Service Status"
          docker exec cupcake-ci-test systemctl status cupcake-web cupcake-worker postgresql nginx redis-server --no-pager -l
          echo "::endgroup::"
          
          echo "::group::Web Server Test"
          docker exec cupcake-ci-test bash -c "
            for i in {1..10}; do
              if curl -f -s http://localhost/ >/dev/null; then
                echo 'Web server responding on attempt $i'
                break
              else
                echo 'Attempt $i failed, waiting...'
                sleep 3
              fi
            done
          "
          echo "::endgroup::"

      - name: Collect artifacts on failure
        if: failure()
        run: |
          mkdir -p artifacts/${{ matrix.os }}
          
          docker exec cupcake-ci-test bash -c "
            systemctl status --no-pager -l > /tmp/systemd-status.log 2>&1 || true
            journalctl --no-pager -n 100 > /tmp/system-journal.log 2>&1 || true
            journalctl -u cupcake-web -u cupcake-worker --no-pager -n 50 > /tmp/cupcake-logs.log 2>&1 || true
            df -h > /tmp/disk-usage.log 2>&1 || true
            ps aux > /tmp/processes.log 2>&1 || true
          "
          
          docker cp cupcake-ci-test:/tmp/systemd-status.log artifacts/${{ matrix.os }}/ || true
          docker cp cupcake-ci-test:/tmp/system-journal.log artifacts/${{ matrix.os }}/ || true
          docker cp cupcake-ci-test:/tmp/cupcake-logs.log artifacts/${{ matrix.os }}/ || true
          docker cp cupcake-ci-test:/tmp/disk-usage.log artifacts/${{ matrix.os }}/ || true
          docker cp cupcake-ci-test:/tmp/processes.log artifacts/${{ matrix.os }}/ || true
          
          docker cp cupcake-ci-test:/var/log/nginx/ artifacts/${{ matrix.os }}/nginx-logs/ || true

      - name: Upload failure artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-logs-${{ matrix.os }}
          path: artifacts/${{ matrix.os }}/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          docker stop cupcake-ci-test || true
          docker rm cupcake-ci-test || true

  report:
    name: Test Report
    needs: [prepare-matrix, ansible-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate test report
        run: |
          echo "# CUPCAKE Ansible CI Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| OS | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          MATRIX_JSON='${{ needs.prepare-matrix.outputs.matrix }}'
          echo "$MATRIX_JSON" | jq -r '.[]' | while read -r os; do
            echo "| $os | 🔍 Check individual job |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Review individual job results above" >> $GITHUB_STEP_SUMMARY
          echo "- Check failure artifacts if any tests failed" >> $GITHUB_STEP_SUMMARY
          echo "- Update playbooks based on test results" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Note:** This was a scheduled nightly test run" >> $GITHUB_STEP_SUMMARY
          fi