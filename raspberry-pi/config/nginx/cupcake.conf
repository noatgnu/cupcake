# CUPCAKE Nginx Configuration for Raspberry Pi 5
# Optimized for low-power performance

server {
    listen 80;
    server_name cupcake-pi.local cupcake-pi _;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Robots-Tag "noindex, nofollow" always;
    
    # Client settings
    client_max_body_size 100M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
    
    # Static files with aggressive caching
    location /static/ {
        alias /opt/cupcake/staticfiles/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Compression for static assets
        location ~* \.(css|js|json)$ {
            gzip_static on;
            expires 1y;
        }
        
        # Images
        location ~* \.(jpg|jpeg|png|gif|ico|svg|webp)$ {
            expires 30d;
            add_header Cache-Control "public";
        }
        
        # Fonts
        location ~* \.(woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public";
            add_header Access-Control-Allow-Origin "*";
        }
    }
    
    # Media files with security restrictions
    location /media/ {
        alias /opt/cupcake/media/;
        expires 7d;
        add_header Cache-Control "public";
        
        # Security: prevent execution of scripts in media directory
        location ~* \.(php|py|pl|sh|cgi|exe|bat)$ {
            deny all;
            return 403;
        }
        
        # Rate limit uploads
        location ~* ^/media/uploads/ {
            limit_req zone=upload burst=5 nodelay;
        }
    }
    
    # API endpoints with rate limiting
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Max-Age 86400;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
        
        proxy_pass http://127.0.0.1:8000;
        include /etc/nginx/conf.d/proxy_params.conf;
    }
    
    # Admin interface with extra security
    location /admin/ {
        # Rate limit admin access more strictly
        limit_req zone=login burst=3 nodelay;
        
        # Additional security headers for admin
        add_header X-Frame-Options DENY always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;
        
        proxy_pass http://127.0.0.1:8000;
        include /etc/nginx/conf.d/proxy_params.conf;
    }
    
    # WebSocket support for real-time features
    location /ws/ {
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
    }
    
    # Health check endpoint (no logging)
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "healthy\n";
    }
    
    # System monitoring dashboard (internal only)
    location /dashboard {
        # Only allow local access
        allow 127.0.0.1;
        allow ::1;
        allow 192.168.0.0/16;
        allow 10.0.0.0/8;
        deny all;
        
        proxy_pass http://127.0.0.1:9000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    # Favicon
    location = /favicon.ico {
        alias /opt/cupcake/staticfiles/images/favicon.ico;
        expires 30d;
        add_header Cache-Control "public";
        access_log off;
    }
    
    # Robots.txt
    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
        access_log off;
    }
    
    # Main application
    location / {
        # Default caching for HTML responses
        add_header Cache-Control "no-cache, must-revalidate";
        
        proxy_pass http://127.0.0.1:8000;
        include /etc/nginx/conf.d/proxy_params.conf;
        
        # Handle large file uploads
        proxy_request_buffering off;
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
    
    # Security: Block access to sensitive files
    location ~* \.(env|log|ini|conf|bak|backup|old|tmp|temp)$ {
        deny all;
        return 404;
    }
    
    # Security: Block access to hidden files
    location ~ /\. {
        deny all;
        return 404;
    }
    
    # Security: Block access to version control
    location ~ /\.(git|svn|hg) {
        deny all;
        return 404;
    }
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /opt/cupcake/staticfiles/errors;
        internal;
    }
    
    location = /50x.html {
        root /opt/cupcake/staticfiles/errors;
        internal;
    }
}

# Optional: HTTPS configuration (when SSL certificates are available)
# server {
#     listen 443 ssl http2;
#     server_name cupcake-pi.local cupcake-pi;
#     
#     ssl_certificate /etc/ssl/certs/cupcake.crt;
#     ssl_certificate_key /etc/ssl/private/cupcake.key;
#     
#     # SSL configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # HSTS
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     
#     # Include the same location blocks as HTTP version
#     include /etc/nginx/sites-available/cupcake-locations.conf;
# }