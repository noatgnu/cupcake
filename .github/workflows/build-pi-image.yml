name: Build CUPCAKE Raspberry Pi Image

on:
  workflow_dispatch:
    inputs:
      pi_model:
        description: 'Raspberry Pi Model'
        required: true
        default: 'both'
        type: choice
        options:
        - 'pi4'
        - 'pi5'
        - 'both'
      image_version:
        description: 'Image Version Tag'
        required: true
        default: 'latest'
        type: string
      enable_ssh:
        description: 'Enable SSH by default'
        required: true
        default: true
        type: boolean
      wifi_ssid:
        description: 'WiFi SSID (optional)'
        required: false
        type: string
      wifi_password:
        description: 'WiFi Password (optional)'
        required: false
        type: string
  release:
    types: [published]
  push:
    branches: [ main, master ]
    paths:
      - '.github/workflows/build-pi-image.yml'
      - 'raspberry-pi/**'

jobs:
  build-pi4-image:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.pi_model == 'pi4' || inputs.pi_model == 'both' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h

    - name: Install pi-gen dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qemu-user-static \
          debootstrap git \
          parted kpartx fdisk gdisk \
          dosfstools e2fsprogs \
          zip xz-utils \
          python3 python3-pip \
          binfmt-support \
          rsync \
          quilt \
          libarchive-tools \
          arch-test \
          coreutils \
          zerofree \
          tar \
          whois \
          grep

    - name: Clone and setup pi-gen
      run: |
        git clone https://github.com/RPi-Distro/pi-gen.git
        cd pi-gen
        git checkout 2025-05-13-raspios-bookworm

    - name: Configure pi-gen for Pi 4 using existing raspberry-pi structure
      run: |
        cd pi-gen
        
        # Create pi-gen configuration based on existing raspberry-pi structure
        cat > config << 'EOF'
        IMG_NAME="cupcake-pi4-${{ inputs.image_version || 'latest' }}"
        IMG_DATE="$(date +%Y-%m-%d)"
        RELEASE="bookworm"
        DEPLOY_COMPRESSION="xz"
        
        # Pi 4 specific
        PI_MODEL="4"
        ARCH="arm64"
        
        # Basic settings
        ENABLE_SSH=${{ inputs.enable_ssh && '1' || '0' }}
        DISABLE_SPLASH=1
        DISABLE_FIRST_BOOT_USER_RENAME=1
        
        # Custom stages
        STAGE_LIST="stage0 stage1 stage2 stage-cupcake"
        
        # Locale settings
        TIMEZONE_DEFAULT="UTC"
        KEYBOARD_KEYMAP="us"
        KEYBOARD_LAYOUT="English (US)"
        
        # User configuration
        FIRST_USER_NAME="cupcake"
        FIRST_USER_PASS="cupcake123"
        
        # Reduce GPU memory for Pi 4
        GPU_MEM=64
        
        # WiFi configuration (optional)
        WPA_ESSID="${{ inputs.wifi_ssid || '' }}"
        WPA_PASSWORD="${{ inputs.wifi_password || '' }}"
        WPA_COUNTRY="US"
        EOF

    - name: Create CUPCAKE stage using existing raspberry-pi configuration
      run: |
        cd pi-gen
        
        # Create custom stage directory
        mkdir -p stage-cupcake/01-cupcake/files
        
        # Copy existing raspberry-pi system configuration
        cp -r "${GITHUB_WORKSPACE}/raspberry-pi/config/system/"* stage-cupcake/01-cupcake/files/
        
        # Create cupcake directories in the stage
        mkdir -p stage-cupcake/01-cupcake/files/opt/cupcake/{scripts,src,data,logs,backup,media,config}
        mkdir -p stage-cupcake/01-cupcake/files/var/log/cupcake
        mkdir -p stage-cupcake/01-cupcake/files/var/lib/cupcake
        
        # Copy existing raspberry-pi scripts
        cp -r "${GITHUB_WORKSPACE}/raspberry-pi/scripts/"* stage-cupcake/01-cupcake/files/opt/cupcake/scripts/
        chmod +x stage-cupcake/01-cupcake/files/opt/cupcake/scripts/*
        
        # Copy existing configuration
        cp -r "${GITHUB_WORKSPACE}/raspberry-pi/config/nginx" stage-cupcake/01-cupcake/files/opt/cupcake/config/
        cp -r "${GITHUB_WORKSPACE}/raspberry-pi/config/postgresql" stage-cupcake/01-cupcake/files/opt/cupcake/config/
        
        # Copy CUPCAKE source code (excluding development files)
        rsync -av --exclude='__pycache__' \
                  --exclude='*.pyc' \
                  --exclude='.git' \
                  --exclude='node_modules' \
                  --exclude='venv' \
                  --exclude='env' \
                  --exclude='.env' \
                  --exclude='build' \
                  --exclude='dist' \
                  --exclude='raspberry-pi' \
                  --exclude='pi-deployment' \
                  --exclude='tests' \
                  "${GITHUB_WORKSPACE}/" stage-cupcake/01-cupcake/files/opt/cupcake/src/
        
        # Create stage run script for Pi 4
        cat > stage-cupcake/01-cupcake/01-run.sh << 'EOF'
        #!/bin/bash -e
        
        # Install system packages
        on_chroot << 'CHROOT_EOF'
        export DEBIAN_FRONTEND=noninteractive
        
        # Update package list
        apt-get update
        
        # Install PostgreSQL
        apt-get install -y postgresql postgresql-contrib postgresql-client
        
        # Install Redis
        apt-get install -y redis-server
        
        # Install Nginx
        apt-get install -y nginx
        
        # Install Python and essential packages for native deployment
        apt-get install -y python3 python3-pip python3-venv python3-dev
        
        # Install system dependencies for Python packages
        apt-get install -y build-essential libpq-dev libffi-dev libssl-dev
        apt-get install -y libxml2-dev libxslt1-dev libjpeg-dev zlib1g-dev
        apt-get install -y git curl wget unzip htop nvme-cli
        
        # Install Node.js for frontend builds
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        apt-get install -y nodejs
        
        # Clean up
        apt-get autoremove -y
        apt-get clean
        rm -rf /var/lib/apt/lists/*
        
        CHROOT_EOF
        
        # Copy configuration files
        cp -r files/* "${ROOTFS_DIR}/"
        
        # Set permissions
        chmod +x "${ROOTFS_DIR}/opt/cupcake/scripts/"*
        
        # Create cupcake user and directories
        on_chroot << 'CHROOT_EOF'
        # Create cupcake user if it doesn't exist
        if ! id "cupcake" &>/dev/null; then
            useradd -m -s /bin/bash cupcake
            echo "cupcake:cupcake123" | chpasswd
            usermod -aG sudo cupcake
        fi
        
        # Set ownership
        chown -R cupcake:cupcake /opt/cupcake
        chown -R cupcake:cupcake /var/log/cupcake
        chown -R cupcake:cupcake /var/lib/cupcake
        
        # Enable services
        systemctl enable ssh
        systemctl enable postgresql
        systemctl enable redis-server
        systemctl enable nginx
        systemctl enable cupcake-setup.service
        
        CHROOT_EOF
        
        echo "CUPCAKE Pi 4 stage completed successfully"
        EOF
        chmod +x stage-cupcake/01-cupcake/01-run.sh
        
        # Create Pi 4 boot configuration
        mkdir -p stage-cupcake/02-boot-config
        cat > stage-cupcake/02-boot-config/01-pi4-config.sh << 'EOF'
        #!/bin/bash -e
        
        # Add Pi 4 optimizations to boot config
        cat >> "${ROOTFS_DIR}/boot/firmware/config.txt" << 'BOOTEOF'
        
        # CUPCAKE Pi 4 Optimizations
        arm_64bit=1
        dtparam=arm_freq=2000
        dtparam=over_voltage=2
        gpu_mem=64
        
        # Enable NVMe support
        dtparam=pciex1
        dtoverlay=pcie-32bit-dma
        
        # Disable unused interfaces
        dtparam=audio=off
        camera_auto_detect=0
        display_auto_detect=0
        
        # Memory optimizations
        disable_splash=1
        boot_delay=0
        BOOTEOF
        EOF
        chmod +x stage-cupcake/02-boot-config/01-pi4-config.sh

    - name: Build Pi 4 image with pi-gen
      run: |
        cd pi-gen
        sudo ./build.sh
        
        # Move the built image
        sudo mv deploy/*.img "../cupcake-pi4-${{ inputs.image_version || 'latest' }}.img"
        sudo chown runner:runner "../cupcake-pi4-${{ inputs.image_version || 'latest' }}.img"

    - name: Compress Pi 4 image
      run: |
        echo "🗜️ Compressing Pi 4 image..."
        xz -9 -T 0 "cupcake-pi4-${{ inputs.image_version || 'latest' }}.img"
        sha256sum "cupcake-pi4-${{ inputs.image_version || 'latest' }}.img.xz" > "cupcake-pi4-${{ inputs.image_version || 'latest' }}.img.xz.sha256"

    - name: Upload Pi 4 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cupcake-pi4-image-${{ inputs.image_version || 'latest' }}
        path: |
          cupcake-pi4-${{ inputs.image_version || 'latest' }}.img.xz
          cupcake-pi4-${{ inputs.image_version || 'latest' }}.img.xz.sha256
        retention-days: 30

  build-pi5-image:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.pi_model == 'pi5' || inputs.pi_model == 'both' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h

    - name: Install pi-gen dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qemu-user-static \
          debootstrap git \
          parted kpartx fdisk gdisk \
          dosfstools e2fsprogs \
          zip xz-utils \
          python3 python3-pip \
          binfmt-support \
          rsync \
          quilt \
          libarchive-tools \
          arch-test \
          coreutils \
          zerofree \
          tar \
          whois \
          grep

    - name: Clone and setup pi-gen
      run: |
        git clone https://github.com/RPi-Distro/pi-gen.git
        cd pi-gen
        git checkout 2024-07-04-raspios-bookworm

    - name: Configure pi-gen for Pi 5 using existing raspberry-pi structure
      run: |
        cd pi-gen
        
        # Create pi-gen configuration based on existing raspberry-pi structure
        cat > config << 'EOF'
        IMG_NAME="cupcake-pi5-${{ inputs.image_version || 'latest' }}"
        IMG_DATE="$(date +%Y-%m-%d)"
        RELEASE="bookworm"
        DEPLOY_COMPRESSION="xz"
        
        # Pi 5 specific
        PI_MODEL="5"
        ARCH="arm64"
        
        # Basic settings
        ENABLE_SSH=${{ inputs.enable_ssh && '1' || '0' }}
        DISABLE_SPLASH=1
        DISABLE_FIRST_BOOT_USER_RENAME=1
        
        # Custom stages
        STAGE_LIST="stage0 stage1 stage2 stage-cupcake"
        
        # Locale settings
        TIMEZONE_DEFAULT="UTC"
        KEYBOARD_KEYMAP="us"
        KEYBOARD_LAYOUT="English (US)"
        
        # User configuration
        FIRST_USER_NAME="cupcake"
        FIRST_USER_PASS="cupcake123"
        
        # Higher GPU memory for Pi 5
        GPU_MEM=128
        
        # WiFi configuration (optional)
        WPA_ESSID="${{ inputs.wifi_ssid || '' }}"
        WPA_PASSWORD="${{ inputs.wifi_password || '' }}"
        WPA_COUNTRY="US"
        EOF

    - name: Create CUPCAKE stage using existing raspberry-pi configuration
      run: |
        cd pi-gen
        
        # Create custom stage directory
        mkdir -p stage-cupcake/01-cupcake/files
        
        # Copy existing raspberry-pi system configuration
        cp -r "${GITHUB_WORKSPACE}/raspberry-pi/config/system/"* stage-cupcake/01-cupcake/files/
        
        # Create cupcake directories in the stage
        mkdir -p stage-cupcake/01-cupcake/files/opt/cupcake/{scripts,src,data,logs,backup,media,config}
        mkdir -p stage-cupcake/01-cupcake/files/var/log/cupcake
        mkdir -p stage-cupcake/01-cupcake/files/var/lib/cupcake
        
        # Copy existing raspberry-pi scripts
        cp -r "${GITHUB_WORKSPACE}/raspberry-pi/scripts/"* stage-cupcake/01-cupcake/files/opt/cupcake/scripts/
        chmod +x stage-cupcake/01-cupcake/files/opt/cupcake/scripts/*
        
        # Copy existing configuration
        cp -r "${GITHUB_WORKSPACE}/raspberry-pi/config/nginx" stage-cupcake/01-cupcake/files/opt/cupcake/config/
        cp -r "${GITHUB_WORKSPACE}/raspberry-pi/config/postgresql" stage-cupcake/01-cupcake/files/opt/cupcake/config/
        
        # Copy CUPCAKE source code (excluding development files)
        rsync -av --exclude='__pycache__' \
                  --exclude='*.pyc' \
                  --exclude='.git' \
                  --exclude='node_modules' \
                  --exclude='venv' \
                  --exclude='env' \
                  --exclude='.env' \
                  --exclude='build' \
                  --exclude='dist' \
                  --exclude='raspberry-pi' \
                  --exclude='pi-deployment' \
                  --exclude='tests' \
                  "${GITHUB_WORKSPACE}/" stage-cupcake/01-cupcake/files/opt/cupcake/src/
        
        # Create stage run script for Pi 5
        cat > stage-cupcake/01-cupcake/01-run.sh << 'EOF'
        #!/bin/bash -e
        
        # Install system packages
        on_chroot << 'CHROOT_EOF'
        export DEBIAN_FRONTEND=noninteractive
        
        # Update package list
        apt-get update
        
        # Install PostgreSQL
        apt-get install -y postgresql postgresql-contrib postgresql-client
        
        # Install Redis
        apt-get install -y redis-server
        
        # Install Nginx
        apt-get install -y nginx
        
        # Install Python and essential packages for native deployment
        apt-get install -y python3 python3-pip python3-venv python3-dev
        
        # Install system dependencies for Python packages
        apt-get install -y build-essential libpq-dev libffi-dev libssl-dev
        apt-get install -y libxml2-dev libxslt1-dev libjpeg-dev zlib1g-dev
        apt-get install -y git curl wget unzip htop nvme-cli pciutils
        
        # Install Node.js for frontend builds
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        apt-get install -y nodejs
        
        # Clean up
        apt-get autoremove -y
        apt-get clean
        rm -rf /var/lib/apt/lists/*
        
        CHROOT_EOF
        
        # Copy configuration files
        cp -r files/* "${ROOTFS_DIR}/"
        
        # Set permissions
        chmod +x "${ROOTFS_DIR}/opt/cupcake/scripts/"*
        
        # Create cupcake user and directories
        on_chroot << 'CHROOT_EOF'
        # Create cupcake user if it doesn't exist
        if ! id "cupcake" &>/dev/null; then
            useradd -m -s /bin/bash cupcake
            echo "cupcake:cupcake123" | chpasswd
            usermod -aG sudo cupcake
        fi
        
        # Set ownership
        chown -R cupcake:cupcake /opt/cupcake
        chown -R cupcake:cupcake /var/log/cupcake
        chown -R cupcake:cupcake /var/lib/cupcake
        
        # Enable services
        systemctl enable ssh
        systemctl enable postgresql
        systemctl enable redis-server
        systemctl enable nginx
        systemctl enable cupcake-setup.service
        
        CHROOT_EOF
        
        echo "CUPCAKE Pi 5 stage completed successfully"
        EOF
        chmod +x stage-cupcake/01-cupcake/01-run.sh
        
        # Create Pi 5 boot configuration
        mkdir -p stage-cupcake/02-boot-config
        cat > stage-cupcake/02-boot-config/01-pi5-config.sh << 'EOF'
        #!/bin/bash -e
        
        # Add Pi 5 optimizations to boot config
        cat >> "${ROOTFS_DIR}/boot/firmware/config.txt" << 'BOOTEOF'
        
        # CUPCAKE Pi 5 Optimizations
        arm_64bit=1
        dtparam=arm_freq=2400
        dtparam=over_voltage=2
        gpu_mem=128
        
        # Enable PCIe Gen 3 for NVMe
        dtparam=pciex1_gen=3
        dtoverlay=pcie-32bit-dma
        
        # Pi 5 specific optimizations
        dtparam=i2c_arm=off
        dtparam=spi=off
        
        # Disable unused interfaces
        dtparam=audio=off
        camera_auto_detect=0
        display_auto_detect=0
        
        # Memory and performance optimizations
        disable_splash=1
        boot_delay=0
        arm_boost=1
        BOOTEOF
        EOF
        chmod +x stage-cupcake/02-boot-config/01-pi5-config.sh

    - name: Build Pi 5 image with pi-gen
      run: |
        cd pi-gen
        sudo ./build.sh
        
        # Move the built image
        sudo mv deploy/*.img "../cupcake-pi5-${{ inputs.image_version || 'latest' }}.img"
        sudo chown runner:runner "../cupcake-pi5-${{ inputs.image_version || 'latest' }}.img"

    - name: Compress Pi 5 image
      run: |
        echo "🗜️ Compressing Pi 5 image..."
        xz -9 -T 0 "cupcake-pi5-${{ inputs.image_version || 'latest' }}.img"
        sha256sum "cupcake-pi5-${{ inputs.image_version || 'latest' }}.img.xz" > "cupcake-pi5-${{ inputs.image_version || 'latest' }}.img.xz.sha256"

    - name: Upload Pi 5 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cupcake-pi5-image-${{ inputs.image_version || 'latest' }}
        path: |
          cupcake-pi5-${{ inputs.image_version || 'latest' }}.img.xz
          cupcake-pi5-${{ inputs.image_version || 'latest' }}.img.xz.sha256
        retention-days: 30

  create-release:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    needs: [build-pi4-image, build-pi5-image]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Pi 4 artifacts
      if: ${{ inputs.pi_model == 'pi4' || inputs.pi_model == 'both' }}
      uses: actions/download-artifact@v4
      with:
        name: cupcake-pi4-image-${{ inputs.image_version || 'latest' }}
        path: ./release-artifacts/

    - name: Download Pi 5 artifacts
      if: ${{ inputs.pi_model == 'pi5' || inputs.pi_model == 'both' }}
      uses: actions/download-artifact@v4
      with:
        name: cupcake-pi5-image-${{ inputs.image_version || 'latest' }}
        path: ./release-artifacts/

    - name: Create release notes
      run: |
        cat > release-notes.md << 'EOF'
        # CUPCAKE Raspberry Pi Images - ${{ inputs.image_version || 'latest' }}
        
        Custom Raspberry Pi OS images with CUPCAKE Laboratory Information Management System pre-installed using traditional pi-gen build process.
        
        ## 🎯 Features
        
        - **Native CUPCAKE LIMS** - Direct Python deployment (no Docker)
        - **PostgreSQL & Redis** - Native database and caching services
        - **Nginx** - High-performance web server
        - **Security hardened** - SSH configured, fail2ban ready
        - **NVMe optimized** - High-performance storage support
        - **Auto-setup service** - Completes installation on first boot
        - **Performance tuned** - Optimized for each Pi model
        
        ## 📋 What's Included
        
        ### Pi 4 Edition
        - ARM64 Raspberry Pi OS Lite
        - 2.0GHz overclock with cooling optimization
        - 64MB GPU memory allocation
        - NVMe support with PCIe optimizations
        - Python 3, PostgreSQL, Redis, Nginx
        - Traditional system service deployment
        
        ### Pi 5 Edition  
        - ARM64 Raspberry Pi OS Lite
        - 2.4GHz overclock with advanced cooling
        - 128MB GPU memory allocation
        - PCIe Gen 3 NVMe support
        - Python 3, PostgreSQL, Redis, Nginx
        - Traditional system service deployment
        
        ## 🚀 Quick Start
        
        1. **Flash image** to SD card or NVMe drive using Raspberry Pi Imager
        2. **Boot your Pi** - First boot will take 5-10 minutes for setup
        3. **SSH in**: `ssh cupcake@cupcake-pi4.local` (or cupcake-pi5.local)
        4. **Check status**: `sudo systemctl status cupcake-setup`
        5. **Access CUPCAKE**: http://your-pi-ip (port configured during setup)
        
        ## 🔐 Default Credentials
        
        - **Username**: `cupcake`
        - **Password**: `cupcake123` (change immediately after first login)
        - **SSH**: Enabled by default
        
        ## 📊 System Requirements
        
        ### Minimum for preview or demo purpose only (Pi 4)
        - Raspberry Pi 4B (4GB+ RAM recommended)
        - 128GB+ storage (NVMe SSD strongly recommended)
        - Reliable power supply (official adapter recommended)
        - Ethernet or WiFi connection
        
        ### Recommended (Pi 5)
        - Raspberry Pi 5 (8GB RAM recommended)
        - 500GB+ NVMe SSD 
        - Official Pi 5 power supply
        - Active cooling solution
        - Ethernet connection for best performance
        
        ## 🔧 Post-Installation
        
        After first boot, run these commands:
        
        ```bash
        # Check setup status
        sudo systemctl status cupcake-setup.service
        
        # View setup logs
        sudo journalctl -u cupcake-setup.service -f
        
        # Check CUPCAKE services
        sudo systemctl status postgresql redis-server nginx
        
        # Monitor system resources
        htop
        ```
        
        ## 📖 Documentation
        
        - [CUPCAKE Documentation](https://github.com/noatgnu/cupcake)
        - [Raspberry Pi Deployment Guide](https://github.com/noatgnu/cupcake/tree/master/raspberry-pi)
        - [Traditional Pi Deployment](https://github.com/noatgnu/cupcake/blob/master/raspberry-pi/README.md)
        
        ## 🆘 Support
        
        - [GitHub Issues](https://github.com/noatgnu/cupcake/issues)
        - [Community Discord](https://discord.gg/cupcake-lims)
        
        ---
        
        **⚠️ Important**: This uses traditional pi-gen build process with native system services (no Docker). Change default passwords immediately after installation!
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: pi-image-${{ inputs.image_version || 'latest' }}
        name: CUPCAKE Pi Images ${{ inputs.image_version || 'latest' }}
        body_path: release-notes.md
        files: |
          release-artifacts/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    if: always()
    needs: [build-pi4-image, build-pi5-image, create-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Cleanup build artifacts
      run: |
        echo "🧹 Cleaning up build artifacts..."
        # GitHub automatically cleans up artifacts after retention period
        # This is just a placeholder for any additional cleanup needed