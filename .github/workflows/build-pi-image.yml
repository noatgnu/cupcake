name: Build CUPCAKE Raspberry Pi Image

on:
  workflow_dispatch:
    inputs:
      pi_model:
        description: 'Raspberry Pi Model'
        required: true
        default: 'both'
        type: choice
        options:
        - 'pi4'
        - 'pi5'
        - 'both'
      image_version:
        description: 'Image Version Tag'
        required: true
        default: 'latest'
        type: string
      enable_ssh:
        description: 'Enable SSH by default'
        required: true
        default: true
        type: boolean
      wifi_ssid:
        description: 'WiFi SSID (optional)'
        required: false
        type: string
      wifi_password:
        description: 'WiFi Password (optional)'
        required: false
        type: string
  release:
    types: [published]
  push:
    branches: [ main, master ]
    paths:
      - '.github/workflows/build-pi-image.yml'
      - 'raspberry-pi/**'

jobs:
  build-pi4-image:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.pi_model == 'pi4' || inputs.pi_model == 'both' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h

    - name: Setup Docker and QEMU for pi-gen
      run: |
        # Install required packages for Docker-based pi-gen build
        sudo apt-get update
        sudo apt-get install -y binfmt-support qemu-user-static dos2unix
        
        # Setup binfmt for ARM emulation (required for Docker pi-gen)
        sudo modprobe binfmt_misc
        if systemctl list-unit-files | grep -q "binfmt-support.service"; then
          sudo systemctl restart binfmt-support
        fi
        
        # Verify Docker is available
        docker --version
        
        # Enable ARM emulation for Docker
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Pre-build Frontend (x86 fast build)
      run: |
        cd raspberry-pi
        # Ensure script has correct line endings and is executable
        dos2unix prebuild-frontend.sh 2>/dev/null || true
        chmod +x prebuild-frontend.sh
        bash ./prebuild-frontend.sh --hostname cupcake-pi4.local --output-dir ./frontend-dist
        
    - name: Build Pi 4 image using official pi-gen-action
      uses: usimd/pi-gen-action@v1
      id: build
      with:
        image-name: cupcake-pi4-${{ inputs.image_version || 'latest' }}
        stage-list: stage0 stage1 stage2 ./stage2z-cupcake
        release: bookworm
        username: cupcake
        password: cupcake123
        enable-ssh: ${{ inputs.enable_ssh && '1' || '0' }}
        increase-runner-disk-size: true
        locale: en_US.UTF-8
        timezone: UTC
        keyboard-keymap: us
        compression: xz
        compression-level: 6

    - name: Upload Pi 4 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cupcake-pi4-image-${{ inputs.image_version || 'latest' }}
        path: ${{ steps.build.outputs.image-path }}
        retention-days: 30

  build-pi5-image:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.pi_model == 'pi5' || inputs.pi_model == 'both' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h

    - name: Setup Docker and QEMU for pi-gen
      run: |
        # Install required packages for Docker-based pi-gen build
        sudo apt-get update
        sudo apt-get install -y binfmt-support qemu-user-static dos2unix
        
        # Setup binfmt for ARM emulation (required for Docker pi-gen)
        sudo modprobe binfmt_misc
        if systemctl list-unit-files | grep -q "binfmt-support.service"; then
          sudo systemctl restart binfmt-support
        fi
        
        # Verify Docker is available
        docker --version
        
        # Enable ARM emulation for Docker
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Pre-build Frontend (x86 fast build)
      run: |
        cd raspberry-pi
        # Ensure script has correct line endings and is executable
        dos2unix prebuild-frontend.sh 2>/dev/null || true
        chmod +x prebuild-frontend.sh
        bash ./prebuild-frontend.sh --hostname cupcake-pi5.local --output-dir ./frontend-dist
        
    - name: Build Pi 5 image using official pi-gen-action
      uses: usimd/pi-gen-action@v1
      id: build
      with:
        image-name: cupcake-pi5-${{ inputs.image_version || 'latest' }}
        stage-list: stage0 stage1 stage2 ./stage2z-cupcake
        release: bookworm
        username: cupcake
        password: cupcake123
        enable-ssh: ${{ inputs.enable_ssh && '1' || '0' }}
        increase-runner-disk-size: true
        locale: en_US.UTF-8
        timezone: UTC
        keyboard-keymap: us
        compression: xz
        compression-level: 6

    - name: Upload Pi 5 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cupcake-pi5-image-${{ inputs.image_version || 'latest' }}
        path: ${{ steps.build.outputs.image-path }}
        retention-days: 30

  build-native-arm64:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.pi_model == 'pi4' || inputs.pi_model == 'both' }}
    runs-on: macos-14  # macOS with Apple Silicon (ARM64)
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup native ARM64 build environment
      run: |
        # Install required tools for native pi-gen build
        brew install gnu-sed gnutar coreutils
        
        # Install Docker for ARM64 builds
        brew install --cask docker
        
        # Wait for Docker to start
        sudo /Applications/Docker.app/Contents/MacOS/Docker --unattended &
        sleep 30
        
        # Verify Docker is running
        docker --version

    - name: Setup native ARM64 pi-gen
      run: |
        cd raspberry-pi
        
        # Clone pi-gen for native ARM64 build
        git clone https://github.com/RPi-Distro/pi-gen.git
        
        # Copy our custom stage
        cp -r ../stage2z-cupcake pi-gen/
        
        # Create pi-gen config for native ARM64
        cat > pi-gen/config <<EOF
        IMG_NAME=cupcake-pi4-native-${{ inputs.image_version || 'latest' }}
        RELEASE=bookworm
        DEPLOY_COMPRESSION=xz
        LOCALE_DEFAULT=en_US.UTF-8
        TARGET_HOSTNAME=cupcake-pi4
        KEYBOARD_KEYMAP=us
        KEYBOARD_LAYOUT="English (US)"
        TIMEZONE_DEFAULT=UTC
        
        # User configuration
        FIRST_USER_NAME=cupcake
        FIRST_USER_PASS=cupcake123
        ENABLE_SSH=1
        
        # Build configuration for ARM64 native
        WORK_DIR=\$(pwd)/work
        DEPLOY_DIR=\$(pwd)/deploy
        
        # Stage configuration - include our custom stage
        SKIP_IMAGES="3,4,5"
        
        # Native ARM64 build (no emulation needed)
        USE_QEMU=0
        EOF

    - name: Build Pi image natively on ARM64 macOS
      run: |
        cd raspberry-pi/pi-gen
        
        # Use native Docker build for ARM64
        echo "Building Pi image natively on ARM64 macOS..."
        ./build-docker.sh
        
        # Check build results
        ls -la deploy/

    - name: Upload native ARM64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cupcake-pi4-native-arm64-${{ inputs.image_version || 'latest' }}
        path: raspberry-pi/pi-gen/deploy/*.img.xz
        retention-days: 30

  create-release:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    needs: [build-pi4-image, build-pi5-image, build-native-arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Pi 4 artifacts
      if: ${{ inputs.pi_model == 'pi4' || inputs.pi_model == 'both' }}
      uses: actions/download-artifact@v4
      with:
        name: cupcake-pi4-image-${{ inputs.image_version || 'latest' }}
        path: ./release-artifacts/

    - name: Download Pi 5 artifacts
      if: ${{ inputs.pi_model == 'pi5' || inputs.pi_model == 'both' }}
      uses: actions/download-artifact@v4
      with:
        name: cupcake-pi5-image-${{ inputs.image_version || 'latest' }}
        path: ./release-artifacts/

    - name: Download native ARM64 artifacts
      if: ${{ inputs.pi_model == 'pi4' || inputs.pi_model == 'both' }}
      uses: actions/download-artifact@v4
      with:
        name: cupcake-pi4-native-arm64-${{ inputs.image_version || 'latest' }}
        path: ./release-artifacts/

    - name: Create release notes
      run: |
        cat > release-notes.md << 'EOF'
        # CUPCAKE Raspberry Pi Images - ${{ inputs.image_version || 'latest' }}
        
        Custom Raspberry Pi OS images with CUPCAKE Laboratory Information Management System pre-installed using traditional pi-gen build process.
        
        ## 🎯 Features
        
        - **Native CUPCAKE LIMS** - Direct Python deployment (no Docker)
        - **PostgreSQL & Redis** - Native database and caching services
        - **Nginx** - High-performance web server
        - **Security hardened** - SSH configured, fail2ban ready
        - **NVMe optimized** - High-performance storage support
        - **Auto-setup service** - Completes installation on first boot
        - **Performance tuned** - Optimized for each Pi model
        
        ## 📋 What's Included
        
        ### Pi 4 Edition (2 Variants)
        - ARM64 Raspberry Pi OS Lite
        - 2.0GHz overclock with cooling optimization  
        - 64MB GPU memory allocation
        - NVMe support with PCIe optimizations
        - Python 3, PostgreSQL 14, Redis, Nginx
        - Traditional system service deployment
        - **Standard build**: Using pi-gen-action (QEMU emulation)
        - **Native ARM64 build**: Built natively on macOS ARM64 (faster, no emulation)
        
        ### Pi 5 Edition  
        - ARM64 Raspberry Pi OS Lite
        - 2.4GHz overclock with advanced cooling
        - 128MB GPU memory allocation
        - PCIe Gen 3 NVMe support
        - Python 3, PostgreSQL, Redis, Nginx
        - Traditional system service deployment
        
        ## 🚀 Quick Start
        
        1. **Flash image** to SD card or NVMe drive using Raspberry Pi Imager
        2. **Boot your Pi** - First boot will take 5-10 minutes for setup
        3. **SSH in**: `ssh cupcake@cupcake-pi4.local` (or cupcake-pi5.local)
        4. **Check status**: `sudo systemctl status cupcake-setup`
        5. **Access CUPCAKE**: http://your-pi-ip (port configured during setup)
        
        ## 🔐 Default Credentials
        
        - **Username**: `cupcake`
        - **Password**: `cupcake123` (change immediately after first login)
        - **SSH**: Enabled by default
        
        ## 📊 System Requirements
        
        ### Minimum for preview or demo purpose only (Pi 4)
        - Raspberry Pi 4B (4GB+ RAM recommended)
        - 128GB+ storage (NVMe SSD strongly recommended)
        - Reliable power supply (official adapter recommended)
        - Ethernet or WiFi connection
        
        ### Recommended (Pi 5)
        - Raspberry Pi 5 (8GB RAM recommended)
        - 500GB+ NVMe SSD 
        - Official Pi 5 power supply
        - Active cooling solution
        - Ethernet connection for best performance
        
        ## 🔧 Post-Installation
        
        After first boot, run these commands:
        
        ```bash
        # Check setup status
        sudo systemctl status cupcake-setup.service
        
        # View setup logs
        sudo journalctl -u cupcake-setup.service -f
        
        # Check CUPCAKE services
        sudo systemctl status postgresql redis-server nginx
        
        # Monitor system resources
        htop
        ```
        
        ## 📖 Documentation
        
        - [CUPCAKE Documentation](https://github.com/noatgnu/cupcake)
        - [Raspberry Pi Deployment Guide](https://github.com/noatgnu/cupcake/tree/master/raspberry-pi)
        - [Traditional Pi Deployment](https://github.com/noatgnu/cupcake/blob/master/raspberry-pi/README.md)
        
        ## 🆘 Support
        
        - [GitHub Issues](https://github.com/noatgnu/cupcake/issues)
        - [Community Discord](https://discord.gg/cupcake-lims)
        
        ---
        
        **⚠️ Important**: This uses traditional pi-gen build process with native system services (no Docker). Change default passwords immediately after installation!
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: pi-image-${{ inputs.image_version || 'latest' }}
        name: CUPCAKE Pi Images ${{ inputs.image_version || 'latest' }}
        body_path: release-notes.md
        files: |
          release-artifacts/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    if: always()
    needs: [build-pi4-image, build-pi5-image, create-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Cleanup build artifacts
      run: |
        echo "🧹 Cleaning up build artifacts..."
        # GitHub automatically cleans up artifacts after retention period
        # This is just a placeholder for any additional cleanup needed